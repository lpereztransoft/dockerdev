# Define settings for Single-Sign-On with OAuth2; this means that we need to relay the OAuth token
# to the subsequent resources that are proxied by the Zuul api gateway.

# The home definition tells us to allow anonymous access (secure: false) to the static resources that
# are accessed through the Zuul proxy.

# Remaining properties are used by the OAuth2 SSO to determine where the authorization server is and
# what client crendentials to use to access that server.
# Logging settings.
logging:

  # The default level of all loggers. Can be OFF, ERROR, WARN, INFO, DEBUG, TRACE, or ALL.
  level:  
  # config application
    org.springframework.cloud.netflix.zuul: TRACE
    com.scloud.ag.apigateway: DEBUG
    org.springframework.security: DEBUG
  # Logger-specific levels.
  loggers:

    # Redirects SQL logs to a separate file
    org.hibernate.SQL: DEBUG
    org.springframework.web: DEBUG
    org.springframework.security: DEBUG

# Define the port where the API gateway server would be running
server:
  port: 8765
# config bus
spring:
  rabbitmq:
    host: {DOCKER_IP} #config ip rabbitmq and for docker change the host for the ip of your machine
    port: 5672
    username: admin
    password: admin
# config Oauth
serviceOauth:
  oauth: http://oauth-service/uaa
  login: http://oauth-service/uaa/oauth/token?client_id=
  refresh: http://oauth-service/uaa/oauth/token?grant_type=refresh_token&refresh_token=
  logout: http://oauth-service/uaa/api/logout-up
  account: http://oauth-service/uaa/api/account
  errorOauth: http://{HOST_IP}:${server.port}
#spring:
  #application:
    #name: api-gateway
  #config:
    #name: api-gateway
#spring.mvc.dispatch-options-request=true
# Define the routes which determine what URL are serviced by what applications.
# The application/services are defined in the bootstrap.yml file of individual applications
# using the spring.application.name property.

# Note that we don't proxy the calls to the authorization server. The reason being that
# Spring cloud security would need to secure the api gateway before it can route the
# requests using zuul
#zuul.host.connect-timeout-millis: 180000 #3 min
#zuul.host.socket-timeout-millis: 180000
#zuul:
  #host:
    #connect-timeout-millis: 180000
    #socket-timeout-millis: 180000
#
#hystrix:
  #command:
    #default:
      #execution:
        #isolation:
          #thread:
            #timeoutInMilliseconds: 65000
          #semaphore:
            #maxConcurrentRequests: 20
endpoints:
  restart:
    enabled: true
  shutdown:
    enabled: true
  health:
    sensitive: false
#
zuul:
  host:
    connect-timeout-millis: 180000
    socket-timeout-millis: 180000
  sensitiveHeaders: Cookie,Set-Cookie,Authentication
  #ignored-services: '*'
  #ignored-headers: Access-Control-Allow-Credentials, Access-Control-Allow-Origin
  #ignoredPatterns: /**/api/**
  #ignoreSecurityHeaders: true
  routes:    
    oauth-service:
      path: /oauth/**
      #sensitiveHeaders: Cookie,Set-Cookie
      serviceId: oauth-service
    water:
      path: /wt/**
      serviceId: water
  addProxyHeaders: true
#
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds: 180000
hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests: 20
hystrix.command.default.execution.timeout.enabled: false
ribbon:
  ConnectTimeout: 180000
  ReadTimeout: 180000
# Define the Eureka server that handles service registration
eureka:
  client:
    serviceUrl:
      #defaultZone: http://actuator:password@localhost:8761/eureka/
      defaultZone: http://{HOST_IP}:8761/eureka/
  instance:
    metadataMap:
      instanceId: ${spring.application.name}:${server.port}
feign:
  hystrix:
    enabled: true
hystrix:
  shareSecurityContext: true

security:
  basic:
    enabled: false
  oauth2:
    resource:
      userInfoUri: http://{HOST_IP}:9999/uaa/api/user
      #preferTokenInfo: false
